{% extends 'AppBundle::base.html.twig' %}

{% use "AppBundle::admin/_base.html.twig" %}

{% block content %}
    <style>
        .isin-forms {
            position: relative;
        }
        .isin-forms.processing:after {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            z-index: 50;
            background: rgba(0,0,0,0.7);
        }
    </style>

    <h1 class="g-unit b">Securities</h1>
    {% if formSuccess %}
        <div class="shadow message g-unit"><strong>{{ formSuccess }}</strong></div>
    {% endif %}

    <div class="grid">

        <div class="g 7/12@m">
            <div class="card card--padded g-unit">
                <div id="spin-container" style="width:48px;float:right"></div>
                <h2 class="c g-unit">Add or update securities</h2>
                <form id="overall-form">
                <div class="grid">
                    <div class="g 1/2@m">
                        <p id="js-status"><em>Italics are optional fields</em></p>
                    </div>
                    <div class="g 1/2@m">
                        <p class="text--right g-unit"><button id="save-isin" class="link--button">Save</button></p>
                    </div>
                </div>
                <hr class="g-unit" />
                <div id="isin-forms" class="isin-forms"></div>
                <div class="grid">
                    <div class="g 1/2">
                        <p><button id="add-isin" class="link--button">+</button></p>
                    </div>
                </div>
                </form>
            </div>
        </div>
        <div class="g 5/12@m">
            <div>
            <div class="card card--padded g-unit">
                <h2 class="c g-unit">Securities with no issuer ({{ noIssuerCount }})</h2>
                {% if noIssuerCount %}
                    <ul class="list--lined">
                        {% for security in noIssuer %}
                            <li>
                                <div class="grid g--align-center">
                                    <a class="g 4/5" href="{{ path('security_show', {isin : security.isin }) }}">{{ security.isin }}</a>
                                    <button class="g 1/5 link--button" data-js="fetch-security" data-isin="{{ security.isin }}">Fetch</button>
                                </div>
                            </li>
                        {% endfor %}
                    </ul>
                {% else %}
                    <p>All good</p>
                {% endif %}
            </div>
            <div class="card card--padded g-unit">
                <h2 class="c g-unit"><label for="csv-file">Upload CSV</label></h2>
                <form enctype="multipart/form-data" method="post">
                    <div>
                        <input id="csv-file" type="file" name="csv-file" />
                    </div>
                    <div class="text--right">
                        <button type="submit" class="link--button" name="submit-file">Upload</button>
                    </div>
                </form>
            </div>
            <div class="card card--padded g-unit">
                <h2 class="c g-unit"><label for="csv-text">Paste CSV</label></h2>
                <form method="post">
                    <div class="form__group">
                        <textarea class="form__field" id="csv-text" name="csv-text" rows="20"></textarea>
                    </div>
                    <div class="text--right">
                        <button type="submit" class="link--button" name="submit-text">Submit</button>
                    </div>
                </form>

            </div>
            </div>
        </div>
    </div>

    <template id="form-template">
        <div class="g-unit" data-js="isin-form">
            <div class="form g-unit" id="isin-form-{X}" data-num="{X}">
                <div class="form__group">
                    <label class="form__label" for="field-{X}-ISIN">ISIN</label>
                    <input data-js="field-isin" class="form__field" id="field-{X}-ISIN" name="field-{X}-ISIN" required />
                </div>
                <div class="form__group">
                    <label class="form__label" for="field-{X}-SECURITY_NAME">SECURITY_NAME</label>
                    <input class="form__field" id="field-{X}-SECURITY_NAME" name="field-{X}-SECURITY_NAME" required />
                </div>
                <div class="grid">
                    <div class="g 1/2@m">
                        <div class="form__group">
                            <label class="form__label" for="field-{X}-SOURCE">SOURCE</label>
                            <input class="form__field" id="field-{X}-SOURCE" name="field-{X}-SOURCE" required />
                        </div>
                        <div class="form__group">
                            <label class="form__label" for="field-{X}-SECURITY_START_DATE">SECURITY_START_DATE (dd/mm/yyyy)</label>
                            <input class="form__field" id="field-{X}-SECURITY_START_DATE" name="field-{X}-SECURITY_START_DATE" required />
                        </div>
                        <div class="form__group">
                            <label class="form__label" for="field-{X}-MONEY_RAISED_GBP">MONEY_RAISED_GBP (Â£m)</label>
                            <input class="form__field" id="field-{X}-MONEY_RAISED_GBP" name="field-{X}-MONEY_RAISED_GBP" required />
                        </div>
                        <div class="form__group">
                            <label class="form__label" for="field-{X}-PRA_ITEM_4748">PRA_ITEM_4748 (line number)</label>
                            <input class="form__field" id="field-{X}-PRA_ITEM_4748" name="field-{X}-PRA_ITEM_4748" required />
                        </div>
                    </div>
                    <div class="g 1/2@m">
                        <div class="form__group">
                            <label class="form__label" for="field-{X}-TRADING_CURRENCY">TRADING_CURRENCY (3 letter code)</label>
                            <input class="form__field" id="field-{X}-TRADING_CURRENCY" name="field-{X}-TRADING_CURRENCY" required />
                        </div>
                        <div class="form__group">
                            <label class="form__label" for="field-{X}-MATURITY_DATE"><em>MATURITY_DATE (dd/mm/yyyy)</em></label>
                            <input class="form__field" id="field-{X}-MATURITY_DATE" name="field-{X}-MATURITY_DATE" />
                        </div>
                        <div class="form__group">
                            <label class="form__label" for="field-{X}-COUPON_RATE"><em>COUPON_RATE (decimal, or with %)</em></label>
                            <input class="form__field" id="field-{X}-COUPON_RATE" name="field-{X}-COUPON_RATE" />
                        </div>
                        <div class="form__group">
                            <label class="form__label" for="field-{X}-COMPANY_NAME"><em>COMPANY_NAME (exact match)</em></label>
                            <input class="form__field" id="field-{X}-COMPANY_NAME" name="field-{X}-COMPANY_NAME" />
                        </div>
                    </div>
                </div>
            </div>
            <hr />
        </div>
    </template>

    <script>
        window.ISINS_LIST = {{ csv|raw }};

        (function() {
            var ID = function( id ) { return document.getElementById( id ); },
                formArea = ID('isin-forms'),
                formTemplate = ID('form-template'),
                status = ID('js-status'),
                formCount = 0,
                toProcess = 0,
                prevValues = [],
                spinContainer,
                formFields = [
                    'ISIN',
                    'SECURITY_NAME',
                    'SOURCE',
                    'SECURITY_START_DATE',
                    'MATURITY_DATE',
                    'MONEY_RAISED_GBP',
                    'COUPON_RATE',
                    'PRA_ITEM_4748',
                    'TRADING_CURRENCY',
                    'COMPANY_NAME'
                ],

            setSpinner = function() {
                var spinner = ID('loading-spinner'),
                    spin = document.importNode(spinner.content, true);
                spinContainer = ID('spin-container');
                spinContainer.appendChild(spin);
                hideSpinner();
            },

            hideSpinner = function() {
                spinContainer.classList.add('hidden');
            },

            showSpinner = function() {
                spinContainer.classList.remove('hidden');
            },

            addForm = function() {
                var form = document.importNode(formTemplate.content, true),
                    attrs = ['for','id','name','data-num'],
                    elements = form.querySelectorAll('[' + attrs.join('],[') + ']'),
                    l = elements.length,
                    i;
                for (i = 0; i < l; ++i) {
                    attrs.forEach(function(attr) {
                        if (elements[i].hasAttribute(attr)) {
                            elements[i].setAttribute(
                                    attr,
                                    elements[i].getAttribute(attr).replace('{X}',formCount.toString())
                            );
                        }
                    });
                }
                formCount++;
                formArea.appendChild(form);
            },

            fillForm = function(formNumber, data) {
                formFields.forEach(function(fieldName) {
                    field = ID('field-' + formNumber.toString() + '-' + fieldName).value = data[fieldName];
                });
            },

            beginProcessing = function() {
                var forms = formArea.querySelectorAll('[data-num]'),
                    count = forms.length;
                toProcess = count;
                formArea.classList.add('processing');
                showSpinner();
                updateStatus(count);

                goProcess(forms, 0, count);
            },
            goProcess = function(forms, i, count) {
                processForm(forms[i], function() {
                    toProcess--;
                    updateStatus(toProcess);
                    goProcess(forms, i+1, count);
                })
            },

            processForm = function(form, callback) {
                var request = new XMLHttpRequest(),
                    data = [],
                    params,
                    field,
                    num = form.getAttribute('data-num'),
                    isinField = ID('field-' + num.toString() + '-ISIN'),
                    isin = isinField.value || null;

                if (!isin || isin.length == 0) {
                    callback();
                    return;
                }

                // create the data object
                formFields.forEach(function(fieldName) {
                    field = ID('field-' + num.toString() + '-' + fieldName);
                    data[fieldName] = field.value;
                });

                // make the ajax call
                request.open('POST', '/admin/process-security.json');
                request.onload = function() {
                    var resData;
                    try {
                        resData = JSON.parse(this.response);
                        if (resData.error) {
                            alert('Error for ' + isin + ': ' + resData.error);
                        }
                    } catch(e) {
                        alert('Error for ' + isin + ': ' + this.statusText);
                    }
                    callback();
                };

                request.onerror = function() {
                    alert('Unspecified Error processing ' + isin);
                    callback();
                };

                params = Object.keys(data).map(function(k) {
                    return encodeURIComponent(k) + "=" + encodeURIComponent(data[k]);
                }).join('&');

                request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
                request.send(params);
            },

            updateStatus = function(count) {
                var statusText = 'All processed';
                if (count > 0) {
                    statusText = count.toString() + ' left to process';
                } else {
                    formArea.classList.remove('processing');
                    hideSpinner();
                }
                status.innerHTML = statusText;
            },

            autoCompleteIsin = function(isin, formNum) {
                var request = new XMLHttpRequest();
                showSpinner();
                request.open('GET', '/securities/' + isin + '.json', true);
                request.onload = function() {
                    var data = [], resData;
                    hideSpinner();
                    if (this.status == 200) {
                        resData = JSON.parse(this.response);
                        data['ISIN'] = resData.security.isin;
                        data['SECURITY_NAME'] = resData.security.name;
                        data['SOURCE'] = resData.security.exchange;
                        data['SECURITY_START_DATE'] = resData.security.startDate;
                        data['MATURITY_DATE'] = resData.security.maturityDate;
                        data['MONEY_RAISED_GBP'] = resData.security.amountRaised;
                        data['COUPON_RATE'] = resData.security.coupon;
                        data['PRA_ITEM_4748'] = resData.security.product.number;
                        data['TRADING_CURRENCY'] = resData.security.currency;
                        data['COMPANY_NAME'] = resData.security.issuer ? resData.security.issuer.name : '';
                        return fillForm(formNum, data);
                    }
                };

                request.onerror = function() {
                    hideSpinner();
                };

                request.send();
            },

            addListeners = function() {
                var noIssuers = document.querySelectorAll('[data-js="fetch-security"]'),
                        l = noIssuers.length,
                        i;
                for (i = 0; i < l; i++) {
                    noIssuers[i].addEventListener('click', function(e) {
                        autoCompleteIsin(e.target.dataset.isin, 0);
                    });
                }

                ID('add-isin').addEventListener('click', function(e) {
                   addForm();
                });

                ID('isin-forms').addEventListener('keyup', function (e) {
                    var val, num;
                    if (e.target && e.target.matches('[data-js="field-isin"]')) {
                        val = e.target.value.trim();
                        num = e.target.closest('[data-num]').getAttribute('data-num');
                        if (val.length > 0 && val != prevValues[num]) {
                            prevValues[num] = val;
                            autoCompleteIsin(val, num);
                        }
                    }
                });

                ID('save-isin').addEventListener('click', function(e) {
                    if (ID('overall-form').checkValidity()) {
                        e.preventDefault();
                        beginProcessing();
                    }
                }, false);
            };

            window.onload = function() {
                setSpinner();
                addListeners();
                if (window.ISINS_LIST.length > 0) {
                    window.ISINS_LIST.forEach(function(row) {
                        addForm();
                        fillForm(formCount-1, row);
                    });
                } else {
                    addForm();
                }
            };
        })();
    </script>
{% endblock %}